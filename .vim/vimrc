" File: ~/.vim/vimrc
" Author: Aaron Lucas
"
set nocompatible

" Vundle:
" {{{
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let vundle manage itself
Plugin 'VundleVim/Vundle.vim'

" Lots of colorschemes
" Plugin 'flazz/vim-colorschemes'

" Jedi autocompletion for Python
" Plugin 'davidhalter/jedi-vim'

" Gruvbox colorscheme
Plugin 'morhetz/gruvbox'

" Nord colorscheme
Plugin 'arcticicestudio/nord-vim'

" Papercolors colorscheme
Plugin 'NLKNguyen/papercolor-theme'

" Focuspoint colorscheme
Plugin 'chase/focuspoint-vim'

" Linting plugin
" Plugin 'w0rp/ale'

" Replacement for grep: Ack
Plugin 'mileszs/ack.vim'

" Surround.vim
Plugin 'tpope/vim-surround'

" Git plugin
Plugin 'tpope/vim-fugitive'

" Pairs of handy bracket mappings
Plugin 'tpope/vim-unimpaired'

" Allow . command to be used with plugin maps
Plugin 'tpope/vim-repeat'

" Easy commenting/uncommenting
Plugin 'tpope/vim-commentary'

" Better Caps Lock
Plugin 'tpope/vim-capslock'

" Markdown Syntax
Plugin 'tpope/vim-markdown'
" Plugin 'gabrielelana/vim-markdown'

" Project Navigator
Plugin 'scrooloose/nerdtree'

" NERDTree colors and custom icons
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'
" Plugin 'ryanoasis/vim-devicons'

" Updated Python syntax highlighting
Plugin 'vim-python/python-syntax'

" Python syntax folding
" Plugin 'tmhedberg/SimpylFold'

" Better Python Syntax
" Plugin 'hdima/python-syntax'

" CSV Plugin
Plugin 'mechatroner/rainbow_csv'

" Allow easy selection of indented blocks
Plugin 'michaeljsmith/vim-indent-object'

" Change textwidth in python code depending on whether line is source code or a
" comment
" Plugin 'jimf/vim-pep8-text-width'

" Airline status bar
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'mkitt/tabline.vim'

" Fuzzy finder
Plugin 'ctrlpvim/ctrlp.vim'

" Syntax checking
Plugin 'scrooloose/syntastic'

" LaTeX Plugin
Plugin 'lervag/vimtex'

" Vimwiki Plugin for Notetaking
Plugin 'vimwiki/vimwiki'

call vundle#end()
" }}}

" Custom Settings:
" {{{
filetype plugin indent on

" Enable syntax highlighting
syntax on

set encoding=UTF-8

" Set location of viminfo file
if has('nvim')
    set viminfo+=n~/.vim/nviminfo
else
    set viminfo+=n~/.vim/viminfo
endif

" Set default font when using MacVim
" set guifont=Hack-Regular:h11

" Enable smarter matching
runtime macros/matchit.vim

" Enable mouse interaction
set mouse=a

" Disable splash screen
set shortmess=I

" Style settings
colorscheme gruvbox
set background=dark

" Remove delay when pressing escape (at least when exiting visual mode)
set ttimeoutlen=0

" Allow cursor to go anywhere in visual block mode
set virtualedit+=block

" Show status line with only one window open
set laststatus=2

" Assume decimal number when using C-a and C-x with leading 0
set nrformats-=octal

" Show all possible options when using autocomplete in command mode
set wildmenu

" Tab-related settings
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set shiftround
set expandtab
set autoindent

" Buffer settings
set hidden
set autoread

" Search settings
set ignorecase
set smartcase
set infercase
set incsearch
set showmatch
set hlsearch
set gdefault

" Shows additional command information
set showcmd
set showmode

" More command history
set history=1000

" Enable ruler and line numbers
set ruler
set number
set relativenumber

" Highlight the current line number
set cursorline

" Display long lines (as much as possible)
set display=lastline

" Custom format options (see [fo-table])
autocmd FileType * setlocal formatoptions=cqnlj

" Default maximum line length
set textwidth=80

" Don't show mode twice
set noshowmode

" Prevent windows from being automatically resized
set noequalalways

" Turn off line numbers and highlighting for NeoVim terminals
if has('nvim')
    autocmd TermOpen * set nonumber norelativenumber nocursorline
endif

set noeol

" Prevent screen redrawing while performing a macro
set lazyredraw

" Persistent undo between Vim sessions
set undofile

" Allow loading of external vimrc files
set exrc
set secure
" }}}

" Custom Highlights:
" {{{
hi CursorLine ctermbg=234 guibg=#1d2021
hi CursorLineNr ctermbg=234 guibg=#1d2021
hi CursorColumn ctermbg=234 guibg=#1d2021
" hi NERDTreeDir ctermfg=214, guifg=#fabd2f

hi Normal ctermbg=black guibg=#151515
" }}}

" Custom Mappings:
" {{{
" Set custom <leader> modifier key
let mapleader=" "
let maplocalleader=" "

" Shortcut for global substitute
" nnoremap <leader>s :%s/

" Substitute on last visual selection
nnoremap gs :'<,'>s/

" Fix repeat last substitute command to keep flags
nnoremap & :&&<CR>
xnoremap & :&&<CR>

" Use preper regex while searching
nnoremap / /\v
nnoremap ? ?\v
vnoremap / /\v
vnoremap ? ?\v

" Still have easy access to normal search
nnoremap <leader>/ /
vnoremap <leader>/ /
nnoremap <leader>? ?
vnoremap <leader>? ?

" New tab
nnoremap <leader>t :tabnew<CR>

" Make opening files easier
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Clear search match highlighting
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" Quick buffer switching
nnoremap <leader>, <C-^>

" Visual line navigation opposed to numbered line
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Jump between numerical values in file
nnoremap <silent> <leader>n :call search('\d\+')<CR>
nnoremap <silent> <leader>N :call search('\d\+', 'b')<CR>

" Open Project Navigator (NERDTree)
nnoremap <C-n> :NERDTreeToggle<CR>

" Vim Fugitive Mappings
nnoremap <C-g> :Gstatus<CR>

" Save current buffer
nnoremap <leader>w :w<CR>

" Quick refactor
nnoremap <leader>* :%s/\<<C-R><C-W>\>/

" Redo last macro
nnoremap Q @@

" Autocorrect previous spelling error with most likely correction.
nnoremap <leader>s [sz=1<CR><CR>

" Faster paste from unnamed register
inoremap <C-r><C-r> <C-r>"

" }}}

" Custom Commands:
" {{{
" Vertical resizing to common width
command! Vres :vert res 85

" Reload vimrc
command! Src :source ~/.vim/vimrc
" }}}

" Option Toggling:
" {{{
" General format is <leader>o_ (o for 'option')
" Prevent `o` command triggering if toggle not completed
nnoremap <leader>o <nop>

" Abosulte and relative line numbers
nnoremap <silent> <leader>or :set relativenumber!<CR>

" Colorcolumn (highlight textwidth column)
nnoremap <silent> <leader>oc :let &cc = &cc == '' ? '+0' : ''<CR>

" Toggle Automatic Syntastic Syntax Checking
nnoremap <leader>os :SyntasticToggleMode<CR>
" }}}

" File Specific Settings:
" {{{
" Assembly Settings
" Custom settings for assembly files
" autocmd BufRead,BufNewFile *.s
"     \ setlocal filetype=arm sw=8 ts=8 sts=8 noexpandtab " arm=armv6/7
augroup asm
    autocmd!
    au BufRead,BufNewFile *.s setlocal filetype=mips sw=8 ts=8 sts=8 noexpandtab syntax=mips
augroup end

" Markdown Settings
augroup md
    autocmd!
    au BufNewFile,BufRead *.md,*.MD setlocal syntax=markdown
    au BufNewFile,BufRead *.md,*.MD setlocal foldmethod=marker
    au BufNewFile,BufRead *.md,*.MD setlocal spell
    au BufNewFile,BufRead *.md,*.MD setlocal textwidth=100
    au BufNewFile,BufRead *.md,*.MD vmap <buffer> <leader>b S*gvS*
    au BufNewFile,BufRead *.md,*.MD vmap <buffer> <leader>i S_
    au BufNewFile,BufRead *.md,*.MD vmap <buffer> <leader>e S_gvS*
augroup end

" vimrc settings
augroup vimrc
    autocmd!
    au BufNewFile,BufRead vimrc setlocal foldmethod=marker
augroup end

" LaTeX settings
augroup tex
    autocmd!
    au BufNewFile,BufRead *.tex setlocal filetype=tex
    au BufNewFile,BufRead *.tex setlocal spell
augroup end

" Indent folding for .py files
" autocmd FileType python setlocal foldmethod=indent foldnestmax=1

" if search('^class') > 0
"     autocmd FileType python setlocal foldnestmax=2
" endif
" }}}

" Plugin Settings:
" {{{
" python-syntax
" let g:python_highlight_builtins = 1
" let g:python_highlight_exceptions = 1
" let g:python_highlight_string_formatting = 0
" let g:python_highlight_string_format = 1
let g:python_highlight_indent_errors = 0
let g:python_highlight_space_errors = 0
" let g:python_highlight_class_vars = 1
" let g:python_highlight_operators = 1
let g:python_highlight_all = 1

" NERDTree
let NERDTreeQuitOnOpen = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1

" Close vim if only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1
    \ && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1

let g:NERDTreeHighlightFolders = 1
let g:NERDTreeHighlightFoldersFullName = 1

" airline
let g:airline_powerline_fonts = 1
let g:airline_section_c = '%t'

let g:airline#extensions#capslock#enabled = 1

let g:airline#extensions#syntastic#enabled = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

" syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" let g:syntastic_auto_jump = 1
let g:syntastic_python_checkers=['flake8']

let g:syntasic_mode_map = { "mode": "passive" }

" C++11 support
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'

"SimpylFold
let g:SimpylFold_fold_import = 0
let g:SimpylFold_fold_docstring = 0
" }}}
